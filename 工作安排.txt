配置iptables规则
1.第一步，目标主机入口监听(在目标主机执行)
tcpdump +协议(tcp/udp/icmp)  +端口（port+端口号）and  host + 目标主机IP
2.第二步，在源主机配置traceroute
traceroute +协议(-T/-U/-I) -p +端口号 目标主机
3.判断截获的信息中源主机和目标主机是否是我们的
4.截图保存场景至文档
5.删除并查看iptables规则，成功后再次清空规则表
6.进行下一步验证

iptables测试样例:(基于traceroute工具进行验证，tcpdump辅助查看)
1.开启和关闭iptables
2.禁用端口、绕开禁用端口（端口对照）
3.禁用协议、绕开禁用协议（协议对照）
4.异常捕获（是否正常，不正常的话（部分/全部高时延，部分/全部*））
5.tcpdump数据是否正常(是否存在其他干扰)

iptables主要关注点:可以结合traceroute想要验证的功能来思考
        1.iptables服务的开启和关闭
        2.iptables开放/禁止端口和协议
        3.iptables添加/插入/修改/删除/清空规则
        4.结合traceroute和iptables验证部分功能的有效性
        5.其他功能拓展(联想一下和traceroute或者其他排查问题有关的选项)			
			
下周任务安排
1.tcpdump的使用(工具使用、打印内容的理解、持久化保存成规范格式)及部分功能验证
2.udppinger的安装和使用
3.协助调研eBPF家族工具，并产出说明文档

tcpdump关注点
1.限定主机(tcpdump -i ens18 host 本机IP and host IP)
2.协议对照(tcp/udp或icmp)
3.端口对照(限定某个端口、用非限定端口通信、不限)
4.指定发送和接收方(源主机发送(src)，目标主机接收(dst))
5.看包内容是否有异常

关键字搜索
1.过滤(协议、端口、发送方、接收方)
2.用法
3.持久化(-w)
4.编译加载转化成可阅读形式(-d)，倾倒到标准输出(直接重定向只有部分被持久化)

1.tcpdump工具调研
	1.tcpdump包内容除了ICMP协议的，TCP/UDP协议的包内容写一下文档
	2.再挖掘一下别的有价值的选项
	3.持久化方面，既然-w可以保存截获的包的数据，-r可以读取至标准输出，是否可以通过别的选项规范化数据？并且持久化保存(后续监听和处理会用到)
	标红的选项，要补充截图说明，-N 和 -n会冲突		
	-q选项 udp截图		
	表格内汇总一些注意事项(比如-q选项快速输出，对tcp/udp/icmp的影响，-N和-n冲突问题)		

2.SNMP协议
	关注点
	1.SNMP数据获取（CLI）？snmpget命令获取？
	2.snmp其他工具拓展(snmpgset\snmpwalk\snmpgetnext等)
3.TCP状态机相关命令操作
ss命令(网络套接字统计)

官网
http://www.net-snmp.org/

使用
http://net-snmp.sourceforge.net/tutorial/tutorial-5/commands/snmpget.html
https://linux.die.net/man/1/snmpget
http://snmplabs.com/snmpclitools/snmpwalk.html
man 或者 --help看一下
关注点
1.选项使用
2.单位说明(s、ms)

原理及安装
https://www.cnblogs.com/linuxprobe/p/5679562.html
https://blog.csdn.net/w77_20/article/details/80015913

snmpd命令
1.是否能够制定协议版本
2.其他关于网络的选项
3.MIBlist
4.log
5.-q等

snmp的协议版本与snmp软件版本区别（如何识别协议版本）
-c选项的public是否可以自定义，是否有其他类别
-H选项(后续挖掘有用的配置及情况)

snmpget
snmpgetnext
snmpwalk

Default MIB search path is http://mibs.snmplabs.com/asn1/

https://blog.csdn.net ixiao_09/article/details/77129684

http://snmplabs.com/snmpclitools/snmpget.html

http://www.cnblogs.com/oloroso/p/4595123.html#snmpd.conf%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90%E5%92%8C%E4%BF%AE%E6%94%B9

指定发包工具
https://www.cnblogs.com/xcw0754/p/8449779.html

下周任务安排
1.netstat(查看系统网络状态信息)
2.ethtool(网卡监控设备)
3.ss命令
4.snmpd命令

调研工具时的注意事项：
先确定大致方向，不要跑偏
遇到问题短时间无法解决，先暂时搁置，不能耗费太多时间
使用性文档应避免过多无权威性的文字解释，尽量以执行的结果截图为准
对一周的工作有具体的规划，不能耽误进度，不能做一天和尚撞一天钟

1.树截图，先发给我评估工具的工作量
2.不要用uptime来验证功能，用tcp那一行的案例（重传这些等之后模拟故障再试）
3.不同版本是否对我们想要的数据有影响

补充snmptranslate 由sysUpTime.0->.iso.org.dod.internet.mgmt.mib-2.system.sysUpTime.sysUpTimeInstance->DISMAN-EVENT-MIB::sysUpTimeInstance->.1.3.6.1.2.1.1.3.0
使用OID get时尾部要加".0"
".0"相当于是每一个变量的内容实际存储在他的第一个也是唯一一个子树（OID.0）中，而snmpget只能查找叶节点，因此要加".0"
OID优先在汇总表里面查询，然后才是网址查询（OID_num->OID_full）

1.对net-snmp工具的调研结果进行补充
2.完成ss命令的调研
3.调研ethtool命令
4.开始netstat工具的初步调研

下周任务安排
1.ethtool、netstat收尾工作，lddptool工具调研
2.iptraf，nicstat，iperf，ttcp，mtr工具调研（网络带宽、流量监控、时延丢包）

ttcp下载GitHub地址
https://github.com/mcr/ttcp

1.完善nicstat和mtr使用文档，不需要太细
2.openflow规则注入故障
https://www.cnblogs.com/sgatbl/p/6822154.html
http://flowgrammable.org/sdn/openflow/message-layer/packetout/
https://github.com/floodlight/floodlight
https://github.com/mininet/openflow

1.功能不用实现，不要去尝试（没有源码）
2.关注点
	1.排障的时候关注哪些信息（时延、重传，对应的阈值）  
	2.有没有透露使用哪些工具（比如ifconfig、ethtool）   目前未发现
	3.整体思路树状图（针对于故障排查/处理流程）
3.https://support.huawei.com/enterprise/zh/doc/DOC1000106043找找看有没有隐含的源码

告警
https://support.huawei.com/enterprise/zh/doc/DOC1000105310?section=10122
查看模块
1.OSD节点亚健康
2.服务器节点亚健康
3.MDC与VFS通信异常
4.控制节点故障
5.MDC节点亚健康
6.仲裁网关丢失
7.SNMP管理站连接异常
8.网口速率不匹配
9.网卡端口负载过高
10.IB网卡端口亚健康
11.网卡端口故障
12.IB网卡状态异常
13.IB交换机端口故障
14.IB交换机故障
15.IB子网故障

关注点
	1.排障的时候关注哪些信息（时延、重传，对应的阈值）
	2.有没有透露使用哪些工具（比如ifconfig、ethtool）
	3定位信息，比如网卡、IP、端口号
	4.整体思路树状图（针对于故障排查/处理流程）
	
vsan
https://kb.vmware.com/s/article/2108319?other.KM_Utility.getArticleLanguage=1&r=0&other.KM_Utility.getArticleData=1&ui-comm-runtime-components-aura-components-siteforce-recordservicecomponent.RecordServi


明天上午
完善华为告警文档中的有用信息
画出处理流程树状图
明天后半天
开始总结vsan中的亚健康相关信息，同时输出表格文档

找准关注点
每做一个任务，都要总结，时间消耗，方向是否正确
遇到问题及时给莹哥反应，不要浪费时间

traceroute工具
1.如何收集并持久化跟踪路径
2.是否包含五元组信息（源IP、源端口、目标IP、目标端口、协议）
3.怎么构造包信息
https://linux.die.net/man/8/traceroute_selinux
https://linux.die.net/man/8/traceroute

怎么通过SNMP数据来分析link utilization和drops，
https://support.solarwinds.com/Success_Center/Network_Performance_Monitor_(NPM)/Knowledgebase_Articles/SNMP_link_utilization
怎么通过SNMP计数器获取max_link_util和total_lost_pkt
link utilization可以发现不平衡问题，怎么判断是否平衡，会不会有阈值？
SNMP计数器获取每个端口上接收的损坏帧的数量
https://support.huawei.com/enterprise/zh/doc/EDOC1100004340/2e520c17

1.iptraf，nicstat，iperf，ttcp，mtr工具调研（网络带宽、流量监控、时延丢包）
2.查阅华为亚健康和vsan亚健康的相关文档，提取有用信息，汇总成表格
3.进行traceroute工具的调研，并产出相关文档
4.解决snmp协议的相关问题

今天安排
完成traceroute工具其他选项调研，同时做表和文档

之后再听莹哥安排

hping3（注入故障、关键信息、人为篡改值）和nc
https://www.toolfk.com/linux-command-nc

写脚本基本按照以下思路，记住不要钻牛角尖或者找错方向，学会总结时间耗费在哪，切记软件使用不要花太久，实在不会就问
先思考怎么写->再试命令->命令执行成功后再着手写脚本
比如
1.crontab定时任务优先级没那么高，因为采集脚本写好之后才会设置定时，首先要有脚本
2.命令没执行成功，脚本无从下手
3.执行命令后考虑脚本通用性（变量复用等）

故障注入
1.基于现有调研工具，结合故障注入工具（netem、霍博和王思江开发的网络故障注入工具、hping3网络测试工具、基于openflow规则（python-openflow、ryu库））做功能性及准确性验证（实习生何瑞虎做）
2.压力测试工具（高内存、高带宽等）的扩展（实习生何瑞虎做）

1.优先系统工具->编译的工具（二进制文件是否可以直接执行）->编译工具（有依赖关系的在centos上验证）
2.针对于每个故障类型，检测工具排一个优先级
3.根据优先级和检测的故障类型，找相似功能，功能相似性大的输出到软件的怀疑集

先故障注入的功能性验证，再用现有工具进行故障检测
1.模拟错误包，图片完好无损
2.模拟包乱序，设置时延的话都会时延，不出现25%包立即发送的情况，不出现乱序情况
这是因为ping命令默认发包间隔为1500ms，大于我们所设置的值，因此体现不出来，使用-i选项将发包间隔设置为一个较小的值可以清楚看到乱序

1.目前可成功注入故障及可用工具的检测大致完成，文档，表格也同步进行
2.遗留
	1.包破坏故障未成功注入
	2.部分故障不清楚如何注入

1.iptraf看能不能安装	
完成：有一个包的依赖，无法使用
2.物理机128上注入故障进行测试，和虚拟机64上的结果又较大差异的截图记录
完成：无较大差别，物理机和虚拟机测得数据基本相同

明天（周五）
1.扩展：快速浏览一下tc -netem的其它选项还可以注入其他故障吗

2.cpu负载，memory负载工具
	https://www.cnblogs.com/jingmu/p/7645548.html
	https://blog.csdn.net/guyan1101/article/details/80591831	

1.别的压测工具（功能针对CPU、MEM、bandwidth），要简单易用，通俗易懂（这个不用写文档）
https://www.cnblogs.com/jingmu/p/7645548.html
https://blog.csdn.net/guyan1101/article/details/80591831
2.网络故障注入/模拟方法的拓展（前提也是简单易用好理解，给我评估价值后再考虑是否使用及文档撰写）
3.snmp mib快速浏览，找寻有价值的OID

周报
1.完成traceroute调研的补充工作
2.进行hping3工具的调研，并产出了相关文档
3.进行网络故障的汇总和现有可测工具的对应汇总工作
4.根据现有工具，分别在虚拟机和物理机上进行故障注入并使用相关工具进行检测
5.进行网络故障注入/模拟方法的拓展

工具->数据->验证的问题（包括执行异常）

1.物理机简单测试
2.mtr补充进去
3.工具汇总表

问题:
1. 延时和rtt的区别
2. 获取队列(ss里面貌似有个Recv-Q和send-Q不知道是否是)、获取Buffer相关的信息。(暂时没看到)
3. 要确定mtr是否完全包括traceroute。
4. nicstat里面的sat字段的详细意思。
5. 华为、vSAN的那个没有复盘。
6. mtr里面的发送的数据包个数是否可控制?
7. netstat和SNMP还要深入研究
8. socket errorcode相关的没找到获取信息。
9. TCP reset相关的没找到获取信息。
10.netstat是否可以针对指定端口，指定socket来统计。还有没看到netstat的文档(除了那个图)

复盘当场提出
1.traceroute打印每一跳的时延时，为什么两跳的时延小于一跳的时延
2.各个工具执行消耗的系统开销统计
3.snmp协议中无法验证或还未验证的OID列表，注明原因
4.每个工具要细化到协议，网卡，端口，socket
5.tcpdrop打印信息内容
6.netstat可查看的状态汇总

上周工作总结
1.完成traceroute调研的补充工作
2.进行hping3工具的调研，并产出了相关文档
3.进行网络故障的汇总和现有可测工具的对应汇总工作
4.根据现有工具，分别在虚拟机和物理机上进行故障注入并使用相关工具进行检测
5.进行网络故障注入/模拟方法的拓展

本周工作初步安排
1.解决李博总结的问题（复盘时提出的和后面rtx发的）（完成）
2.netstat调研（完成），snmp疑问点处理
3.压测工具测试，保存命令，故障注入工具拓展
4.华为网站pdf下载（完成）
5.demo开发（不急）

1.所有工具二进制文件可直接执行的，导出到一个文件夹
2.snmp疑问处理（完成）

1.demo说明书(看代码及框架不了解的、有疑惑的地方截图说明，解决后用语言阐述)
2.复盘后的待解决问题已工作表的形式汇总
3.框架不理解要及时反馈沟通
4.开发demo以半天为粒度进行对接，特殊情况可增加沟通频率

5.工具调研
	1.快速浏览选项，提前预知工具的大致功能
	2.针对几个点着重调研
		1.是否与网络相关
		2.是否可持久化存储打印信息
		3.有用价值信息挖掘(比如netstat -s选项，snmp的mib列表)
		4.基本功能验证完，测试稳定性（比如snmp获取的值是否按预期变动），并记录（确定及不确定的（标明疑惑等原因）都要记录）
		5.优先虚拟机进行验证，无误后迁移至物理机验证并记录差异（如hping3由于被网卡被北研接管，部分功能无效）
		6.需要编译环境的优先在有编译环境的centos7（内核3.10.0和HCI一致）编译成功后，将二进制包导入HCI虚拟机进行验证看是否能直接执行，验证无误后迁移至物理机做功能对比验证
	3.以上所有调研（确定性功能及疑惑，解决方案）均可以工作表的形式汇总到一个表格，方便统计及查看
	4.功能性调研可以以word文档的形式撰写，并且保证异常及注意点在表格中同时具备体现
6.第一阶段优缺点
	优点：
		1.文档撰写很规范、详细
		2.逐步改善了调研工具的习惯及能力
3.善于思考工具深层次的含义，较好的完成了交付的任务并有文档产出及结果比较
	缺点：
		1.工作效率略有不足，体现在工具的功能性调研及异常标注文档的撰写上
		2.对关键信息不够敏锐，关注点容易发散，不够聚焦，部分情况会沉迷于次重要的方向影响工作进度
		3.独立思考的能力有待提高，体现在工具对比、稳定性验证上思路不够清晰，造成验证过程思维环路，经常性的做重复及无用的验证过程
 第二阶段展望：
	1.保持第一阶段的优势并改善第一阶段发现的不足
	2.提高工程类项目的阅读及开发能力
	3.协助网络亚健康的初期demo开发，具备开发、调试、优化小模块的基础能力
	
1.针对于上周复盘提出的问题（问题的汇总表）进一步确认是否解决（git文档是否上传，待解决和未解决的有哪些）
2.针对于已解决的和未解决的，汇总到一个表格里，分类按照工作表，如果说很杂的就汇总到一个表格里，后续再分类和补充
3.文档复盘后再次总结一遍（一些关键的截图在文档中是否体现，解决和未解决的是否用特定颜色标注，颜色标注不要冲突）
4.网络带宽工具、压测工具、性能分析汇总到工作表里（这个也是第一阶段的问题补充）

第一阶段第二次复盘总结
1. 需继续调研工具。
    b. socket errorcode相关的没找到获取信息。
    d. 状态和变更获取：ToR交换机，NIC/网卡，网络堆栈(缓冲区)。要确定都有哪些状态和变更。
    e. sFLow，Netflow(数据包采样工具)。
2.故障注入，iptable等（完成）
3.vSAN的那个没有复盘。
4.VS故障过滤提炼(可以找下vs)（完成）。
5.所有的故障、问题和解决方法的统计表。
6. deTector代码理解，走读。
写文档时记得保存资料源
然后SNMP要重点关注交换机端的，特别是交换机的每个port (我们应该有交换机可以来验证吧)。如通过检查交换机SNMP计数器来检测FCS错误，即检查每个端口上接收的损坏帧的数量

iptables注入故障（完成）
包乱序（完成）
错包，随机改一个或多个bit，改头部
netstat获取的信息官方总结（未发现具体说明-s选项输出内容的官方说明）
nethogs和pathload的对比（放到下面的工具调研中）
stress放到故障注入

周报
1.解决第一阶段第一次复盘时总结的问题
	总共16个问题，产出表格五张，文档一份
2.进行netstat调研，并产出了文档
3.压测工具测试，保存命令，故障注入工具拓展
4.将第一次复盘时总结的问题以及补充的内容全部汇总到一张工作表中
	a.针对于上周复盘提出的问题（问题的汇总表）进一步确认是否解决（git文档是否上传，待解决和未解决的有哪些）
	b.针对于已解决的和未解决的，汇总到一个表格里，分类按照工作表，如果说很杂的就汇总到一个表格里，后续再分类和补充
	c.文档复盘后再次总结一遍（一些关键的截图在文档中是否体现，解决和未解决的是否用特定颜色标注，颜色标注不要冲突）
	d.网络带宽工具、压测工具、性能分析汇总到工作表里（这个也是第一阶段的问题补充）
5.开始初步阅读代码，开始将阅读过程中遇到的疑问汇总成文档

本周工作初步安排
1.VS2018年网络问题的提炼
	故障类别(网卡、光模块、交换机、软件逻辑问题等)
	故障类别   故障现象   故障原因   故障处理   是否解决 解决不完善的要记录   
2.pingmesh源码的阅读理解
	代码编写注意事项
	1.模块功能，循环功能，表达式含义，变量含义等都要写注释说明
	2.代码编写尽量规范化，尽量封装，一个函数代码不要超过50-60行
	3.命名要规范，缩进要规范
3.网络亚健康初期demo代码的阅读理解，随阅读过程撰写demo说明书(不用太书面化，将有疑问的地方截图说明，后续demo说明书可引用部分截图资源)
4.持续关注交换机信息获取的工具(lldptool可以在物理机上试一下),这个最后

以后要有汇总意识，刚开始的时候把框架搭好，再往进添东西
	工具调研的时候没有做到这一点，给莹哥和李博增加工作量，谨记！！！
	
周报
1.提取《vs技术支持日报--2018全年》中和网络亚健康有关的所有信息
	提炼出故障类型，故障原因， 解决方法， 故障层级等四个方面的内容，整理成《vs技术支持日报提取信息》表
2.pingmesh源码阅读理解
	1.由于没有抓住阅读代码的正确方向，导致该项工作没有实质性的进展
	2.通过这次代码阅读经历，认识到了自己在源码阅读方面的不足之处，并积极记录改正，提高自身阅读代码的能力
3.被动工具采样脚本编写
	1.基本完成了该脚本的编写内容
	2.编写过程中注意到了代码规范，代码效率和注释的添加等方面，并尽力优化
	3.目前可以进行数据的初步采集
4.处理第一阶段第二次复盘发现的部分问题
	1.iptables故障注入和检测
	2.包乱序故障注入和检测	
	
被动采样脚本后续改进方向
代码注释、修改补充说明（完成）
采样(重点是过滤，用re正则或者其他库是否可行(问家庆))实现排一个优先级（netstat这种优先级靠后）
	mtr > nicstat > traceroute > ping > ss > netstat
持久化的方式（两种方案：1.采集后直接持久化 2.过滤后持久化）
持久化文件命名(IP_工具_选项_标志位(raw/filter)_时间戳.csv)
留意shell正则、过滤
留意不同平台的一个打印情况，记录各平台的处理方式

log 
	nicstat
		raw
		filter
	ping
		raw
		filter
	ss
		raw	
		filter		


以下工具抽时间调研（代码为主）
ip（内置） ttcp lddptool nmap pchar sar（内置） sysctl（内置） pathload qperf（收假后一周内完成）
被动检测脚本收假后两天内完成

1.key(?\,%) 只能用英文字符
2.header用列表(参考csv库)
3.代码里面所有的问题截图(最重要)
4.设计思想保留
5.代码重构（精简化、易理解、规范化）
6.日志不要删除
7.split先后顺序问题


日志文件目录
log 
	nicstat
		raw
		filter
	ping
		raw
		filter
	ss
		raw	
		filter
		
周报
1.在被动检测脚本中增加ss，snmp等命令的信息采集函数
2.在脚本中加入了过滤数据的模块，使得得到的数据更加规范化，便于处理
	在过滤模块的实现中，由于对python语法的理解不够深刻，导致某些数据结构的使用不够规范、
	不符合要求，正在改动中
3.增加了持久化输出到文件的模块，使得数据可以长久的保存，便于处理
	持久化的方式（两种方案：1.采集后直接持久化 2.过滤后持久化）
	持久化文件命名(IP_工具_选项_标志位(raw/filter)_时间戳.csv)
4.初步调研了ip ttcp lddptool nmap pchar sar sysctl pathload qperf等工具
	对这些工具进行了初步调研，还未输出文档，后续会完成调研工作
	
	
	
周一总结
	1.将持久化模块分成了两个函数，一个表示raw，一个表示filter（csv格式）
	2.持久化中添加了路径判断和文件判断以及自动创建路径和文件功能
	3.持久化保存的filter格式化函数中，添加了一个行数标志，当数据是多行时line_number=1，一行时line_number=0，一行和多行有不同的持久化方式
	4.完成了snmp的改写
	5.给每个函数增加了一个专用的过滤函数，具体实现还未完成
周二计划
	1.每个命令的专用过滤函数具体实现
	2.tcpdump命令的处理及过滤函数的添加
	3.确定filter保存的数据是否一一对应，有无header和值不匹配的问题（对采集到的数据的准确性有很大威胁）
	4.snmp的interface分支下获取到的数据
	5.如何配置clustershell，pssh（明晚）


需要修改的问题	
snmp tcpconntable
基于socket，walk的情况下会有很多打印（特定情况触发，用get指定socket套接字）
netstat -natp可以全部获取到
line_number改成一维和二维列表判断(先判断是否是一维的，一维的就转二维)（完成）
csv write_header是否可以识别append，不会重复append（会重复）
filter要拆分（完成）
ss两行合成一行、split之后再次split(':') len() > 1 {[0]->key, [1]->value}

周二总结
	1.每个命令过滤函数具体实现完成，但实现方式不好，需要改进
	2.将持久化函数中的判断文件及路径是否存在的代码独立封装成一个函数（touch_file）
	3.发现目前snmp处理函数的局限性（针对某些OID输出大量信息无法格式化）
	4.进行ip命令的调研
周三计划
	1.ss两行合成一行、split之后再次split(':') len() > 1 {[0]->key, [1]->value}
	2.对snmp存在的问题进行处理
	3.重构过滤模块的代码（通用性，合理性）（完成，分为两个函数）
	4.补充工具调研
	5.choos_tool函数改写（使用函数对象）（暂不进行）

工具补充调研优先级	
ip->lldptool->nmap->sar->pchar->sysctl->ttcp->F/W config

周三总结
	1.filter函数拆分为两个函数，简单过滤（sample_filter）和关键字替换
	2.各个命令独立的filter函数修改
		不再使用过多的不合理的replace()，而是结合shell的正则以及python中re库的正则来达到过滤的效果
	3.完成IP命令的调研，并产出了文档
周四计划
	1.ss两行合成一行、split之后再次split(':') len() > 1 {[0]->key, [1]->value}(完成)
	2.对snmp存在的问题进行处理
	3.补充工具调研

ip->lldptool->nmap->sar->pchar->sysctl->ttcp->qperf/F/W config
telnet->netcat(nc)->lsof(这三个是端口扫描的，有一些是可以远程端口冲突/占用检验的)

nethogs
iptables
route
tcpdump
tc

ifconfig 
ethtool


周报
1.将持久化函数中的判断文件及路径是否存在的代码独立封装成一个函数（touch_file）
2.重构过滤模块的代码（通用性，合理性）
	进行了三次修改，将效率和代码的可读性最大程度的提高
	对一些python标准库的接口掌握的更加全面
3.针对各个工具不同的输出，采用不同的持久化方式
	输出信息较多且格式很不规范的，暂时保存原始数据
	输出规范化数据的，经过过滤之后保存
4.进行ip命令的调研，并产出文档


渠道，医疗，运营商，政府，制造业

周一周二：完成被动检测脚本，各个方面经过修改都基本达到了要求
周三：正式开始第二阶段补充工具调研
思路顺序：
	1.粗略工具调研
	2.试选项，截图
	3.信息挖掘（过滤代码如何实现），考虑是否有必要深入研究
	4.纳管
	5.和其他工具粗略比较
	6.性能测试
	7.记录到《网络亚健康框架》表格中，写好日志
	8.异常情况记录，异常信息记录，执行命令保存，输出结果截图保存
	9.写入代码中

	
	
周报
1.完成被动检测脚本，各个方面经过修改都基本达到了要求
	目前已经添加了ss，nicstat，netstat等七个工具的执行和数据处理（格式化和持久化）
	后续会继续对该脚本做增量，和第二阶段工具补充调研结合
	在导师的帮助下，将原本的500多行代码精简到400行，添加了合理的注释，对之前的版本做了保存和管理
	意识到了自己在函数封装，提高函数通用性方面的不足，后续会努力改进
2.第二阶段工具补充调研
	调研了IP，lldptool，nmap，sar，pchar等工具
	目前nmap由于环境原因暂时搁置（HCI中gcc版本过低）
	发现sar命令中某些选项输出的数据和snmp中相关信息一一对应，之后会做一个比较和取舍
	意识到自己考虑问题还有不周到的地方，某些方面需要经过导师才能反应过来，后面会努力改进
	
	
第二阶段工具调研复盘
1	确定sar中TCP、UDP和IFACE的打印值和nicstat的异同，添加sar -n ALL命令执行截图,是否可以混合选项打印
2	sysctl是否有IP_ECN,TCP_ECN
3	ip命令中tcp_metrics的含义
4	新命令关注点：内存、带宽、CPU、电源、端口、温度、状态、频率
5	给日志中添加timestamp，src_IP/IP两项
6	mtr、traceroute文件header添加一个hop，去掉'.'
7	增加一个header和值长度的判断
8	nicstat命令中去掉自己打印的时间改成timestamp
9	ping命令的header中IP改为dest_IP
10  保存日志样例，路径(依照changelog体现样例的迭代，加上时间戳)
11  mtr选项乱序问题原因排查
12  latest.csv的简单逻辑实现

sar 是否可以混合选项打印
netstat udp的状态栏设为null
ttcp是入侵式还是非入侵式，没有自动结束是不是因为buff未满
telnet服务端的名称
新命令关注点：内存、带宽、CPU、电源、端口、温度、状态、频率
latest.csv的简单逻辑实现


周报
1.和导师进行了一次第二阶段工具调研以及代码开发的复盘
	发现并解决了复盘提出的有关工具使用和代码编写等方面的一些问题
2.截止周五基本完成了第二阶段的工具补充调研工作
	在上周已经完成的五个的基础上，本周共调研了七个工具，并产出了文档，
	另外两个和硬件有关的工具正在进行调研工作，预计本周五晚完成
3.对被动检测脚本进行了修改
	给日志中添加timestamp，src_IP/IP两项
	mtr、traceroute文件header添加一个hop，去掉'.'
	增加一个header和值长度的判断
	nicstat命令中去掉自己打印的时间改成timestamp
	ping命令的header中IP改为dest_IP
4.总结了日志文件格式的迭代样例和路径成一个文档，便于查询


ip
addr 和 link 的区别
ip route中default、main、local的区别

lldptool
lldptool TLV list打印是通过哪个命令参数
adminStatus初步猜测是单双模设置，get-lldp是否能获取到设置情况
mngAddr可以获取IPVX信息，传输bypass
加上-n是否能将邻居的信息全部获取到

sar
对应snmp的OID list是包含的还是全覆盖

ttcp
-s模式下是发空包还是指定长度的包，长度是否能改变
如何设置发送的持续时间、发送的数据总量

qperf时延是连接时延还是rtt往返时延
时延和带宽能够一起测量，带宽的单位确定一下
用最新的版本测试一下时延和带宽msg_size

复盘的迁移进对应的模块